import threading
import time
import sys
from tkinter import *
sys.path.append("..")
import logging

import rtde.rtde as rtde
import rtde.rtde_config as rtde_config

windowHeight = 540
windowWidth = 930
armDown = 0.68
armUp = 1.0
armLeft = -0.21
armRight = 0.67
x = 0
y = 0
# communication with the arm


# logging.basicConfig(level=logging.INFO)

ROBOT_HOST = "192.168.0.37"
ROBOT_PORT = 30004
config_filename = "control_loop_configuration.xml"

keep_running = True

logging.getLogger().setLevel(logging.INFO)

conf = rtde_config.ConfigFile(config_filename)
state_names, state_types = conf.get_recipe("state")
setp_names, setp_types = conf.get_recipe("setp")
watchdog_names, watchdog_types = conf.get_recipe("watchdog")

con = rtde.RTDE(ROBOT_HOST, ROBOT_PORT)
con.connect()

# get controller version
con.get_controller_version()

# setup recipes
con.send_output_setup(state_names, state_types)
setp = con.send_input_setup(setp_names, setp_types)
watchdog = con.send_input_setup(watchdog_names, watchdog_types)

#setp1=[-0.303, -1.755, -2.133, 5.842, -3.634, -2.625]
#setp2 = [-0.303, -1.7, -2.133, 5.842, -3.634, -2.625]
setSxUp = [-0.21, -0.6, 1, 0, 0, 0]
setSxDw = [-0.21, -0.6, 0.68, 0, 0, 0]
setDxUp = [0.67, -0.6, 1, 0, 0, 0]
setDxDw = [0.67, -0.6, 0.68, 0, 0, 0]

setp.input_double_register_0 = 0
setp.input_double_register_1 = 0
setp.input_double_register_2 = 0
setp.input_double_register_3 = 0
setp.input_double_register_4 = 0
setp.input_double_register_5 = 0

# The function "rtde_set_watchdog" in the "rtde_control_loop.urp" creates a 1 Hz watchdog
watchdog.input_int_register_0 = 0


def setp_to_list(sp):
    sp_list = []
    for i in range(0, 6):
        sp_list.append(sp.__dict__["input_double_register_%i" % i])
    return sp_list


def list_to_setp(sp, list):
    for i in range(0, 6):
        sp.__dict__["input_double_register_%i" % i] = list[i]
    return sp


# start data synchronization
if not con.send_start():
    sys.exit()

# control loop
move_completed = True
def armComm():
    while keep_running:
        # receive the current state
        global con, move_completed, setp, watchdog
        global windowHeight, windowWidth, armDown, armLeft, armRight, armUp
        state = con.receive()

        if state is None:
            break

        # do something...
        if move_completed and state.output_int_register_0 == 1:
            move_completed = False
            global x, y
            new_setp = [armLeft+(armRight-armLeft)*x/windowWidth, -0.6, armDown+(armUp-armDown)*(windowHeight-y)/windowHeight, 0, 0, 0]
            list_to_setp(setp, new_setp)
            print("New pose = " + str(new_setp))
            # send new setpoint
            con.send(setp)
            watchdog.input_int_register_0 = 1
        elif not move_completed and state.output_int_register_0 == 0:
            print("Move to confirmed pose = " + str(state.target_q))
            move_completed = True
            watchdog.input_int_register_0 = 0

        # kick watchdog
        con.send(watchdog)

    con.send_pause()

    con.disconnect()


# Create thread
t1 = threading.Thread(target=armComm)

# Start the thread
t1.start()


# Creation of the canvas

root = Tk()
 
n = 0
def on_canvas_click(event):
    # Get the x and y coordinates of the click
    global x,y
    x = event.x
    y = event.y
    radius = 10
    global n
    n=n+1
    # Call the function to draw the circle with the number
    draw_circle_with_number(canvas, x, y, radius, n)

def draw_circle_with_number(canvas, x, y, radius, number):
    # Draw the circle
    canvas.create_oval(x - radius, y - radius, x + radius, y + radius, outline="black", width=2)

    # Draw the number inside the circle
    canvas.create_text(x, y, text=number, fill="black")

frame=Frame(root,width=windowWidth,height=windowHeight, bd=10)
frame.pack(expand = True, fill=BOTH)
 
canvas = Canvas(frame,bg='white', width = windowWidth,height = windowHeight)
canvas.config(cursor='circle')
 
canvas.pack(expand = True, fill = BOTH)

# Bind the left mouse button click event to the on_canvas_click function
canvas.bind("<Button-1>", on_canvas_click)

root.mainloop()

# Wait for the thread to finish
t1.join()